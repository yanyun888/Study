
全局变量：
AFX_MODULE_STATE aaa; 
//当前程序模块状态信息

AFX_MODULE_THREAD_STATE bbb;
//当前程序线程状态信息



CWinApp::CWinApp(LPCTSTR lpszAppName){   //构造 全局对象theApp
	
	AFX_MODULE_STATE* pModuleState = AfxGetModuleState(); 
	//获取全局变量aaa的地址

	AFX_MODULE_THREAD_STATE* pThreadState = pModuleState->m_thread;
	//获取全局变量bbb的地址

	pThreadState->m_pCurrentWinThread = this;
	//将theApp的地址保存到全局变量bbb的一个成员中

	AfxGetThread(){
		AFX_MODULE_THREAD_STATE* pState = AfxGetModuleThreadState();
		//获取全局变量bbb的地址
		CWinThread* pThread = pState->m_pCurrentWinThread;
		//从bbb中取出保存的theapp的地址
		return pThread;   // 返回&theApp
	}

	pThreadState->m_pCurrentWinApp = this;
	//将theApp保存到全局变量aaa的一个成员中

	AfxGetApp(){
		return AfxGetModuleState()->m_pCurrentWinApp;
	}
}  


WinMain(...){
//程序的流程
	AfxWinMain()(...){
		CWinThread* pThread = AfxGetThread();
		CWinApp* pApp = AfxGetApp();
		//以上两句代码获取了theApp的地址
	}
	pApp->InitApplication();
	//利用theApp调用应用程序类的成员虚函数(初始化)

	pThread->InitInstance();
	//利用theApp调用程序类的成员虚函数(创建并显示窗口)

	pThread->Run(){//次函数的内部this指针为theApp
    //利用theApp调用应用程序类的虚函数(消息循环)
		CWinThread::Run(){//函数内部this为&theApp
			for(;;){
				while(没有消息){
					this->OnIdle(...);//利用theApp调用应用程序类成员虚函数(空闲处理)
				}
				do{
					if(GetMessage抓到WM_QUIT消息)
						return ExitInstance(...);
						//利用theApp对象调用应用程序类的成员虚函数(善后处理)
				}while(...);
			}
		}
	}
}


