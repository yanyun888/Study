
今天的内容:
(1)使用共享内存实现进程间的通讯
(2)使用信号量集实现进程间的通讯
(3)网络的基本知识



1.使用共享内存实现进程间的通讯
1.1基本概念
	本质上就是由内核维护的一块内存区域，只不过共享在两个进程之间，通过访问该内存区域从而实现
通信，该通讯方式是最快的IPC通讯方式。

?共享内存放在内存的哪个区域，堆区么？


1.2基本类型
(1)获取key值，使用ftok函数
(2)创建/获取共享内存，使用shmget
(3)挂接共享内存，使用shmat函数
(4)使用共享内存
(5)脱接共享内存，使用shmdt函数
(6)如果不再使用，则删除共享内存，使用shmct函数。


相关函数解析
#include<sys/ipc.h>
#include<sys/shm.h>
int shmget(key_t key,size_t size,int shmflg);

第一个参数：key值
第二个参数：大小，获取已经存在的共享内存时，给0即可
第三个参数：操作的标志位
IPC_CREAT -- 创建
IPC_EXCL -- 若存在，则创建失败
0 -- 获取已经存在的共享内存
返回值：成功返回共享内存的ID，失败返回-1
函数功能：主要用于创建/获取共享内存

注意：
当创建新的共享内存时，需要在第三个参数中指定权限，如：0644(9位二进制数，即3位八进制数)；

(2)shmat函数

#include<sys/types.h>
#include<sys/shm.h>

void* shmat(int shmid, const coid* shmaddr,int shmflg);
int shmdt(const void* shmaddr);

shmid共享内存的ID，shmget函数的返回值
shmaddr默认给NULL，系统分配
shmflg默认给0

返回值：成功返回挂接的地址，失败返回(void*)-1
函数功能:
	主要用于将共享内存挂接到当前进程的地址空间中。

shmdt() -- detach shared memory
函数的功能：根据参数指定的功能对共享内存地址进行脱接

int shmctl(int shmid,int cmd,struct shmid_ds *buf);
第一个参数:共享内存的id
第二个参数：具体的操作命令
第三个参数：结构体指针

函数功能：
主要用于对指定的内存执行指定的操作
IPC_RMID删除共享内存，此时第三个参数直接给空

ipcs -m 查看系统中的共享内存
ipcrm -m xxxx 删除系统中的指定编号的共享内存


2.使用信号量集实现进程间的通信
2.1基本概念
(1)什么叫做信号量
信号量本质就是一个计数器，主要用于控制同时访问的同一个共享资源的进程个数/线程个数。

(2)什么叫信号量集合
信号量集本质上就是由若干个信号量组成的集合，主要用于同时访问多种共享资源的进程数/线程数。
也就是一种资源采用一个信号量控制。



2.2信号量的工作方式
(1)对信号量进行初始化，初始化为最大值
(2)如果有进程申请到共享资源，则信号量的值-1
(3)当信号量的值为0时，申请共享资源的进程进入阻塞状态,等待共享资源的分配
(4)如果有进程释放共享资源，则信号量的值+1
(5)当信号量的值>0时，则阻塞的进程可以继续抢占共享资源，抢占不到共享资源的进程继续阻塞。

2.3使用信号量集实现进程间通信的流程
(1)获取key值，使用ftok函数
(2)创建/获取一个信号量集，使用semget
(3)初始化信号量集，使用semctl
(4)操作信号量集，使用semop
(5)如果不再使用，则删除信号量集，使用semctl函数


2.4相关函数的解析
#include<sys/sem.h>
#include<sys/ipc.h>
#include<sys/types.h>
int semget(key_t key,int nsems,int semflg);
第二个参数：信号量集的大小(信号量的个数)
第三个参数：操作标志
	IPC_CREAT | IPC_EXCL | 0644;
	0 - 表示获取已经存在的信号量集
函数功能
	主要用于创建/获取信号量集，返回semid

#include<sys/sem.h>
#include<sys/ipc.h>
#include<sys/types.h>
int semctl(int semid,int semnum,init cmd,...);
第二个参数：信号量集的下标
第三个参数：具体操作的指令
第四个参数：可变长参数，取决于cmd的参数

IPC_RMID删除信号量集，忽略第二个和第四个参数
SETVAL表示对第二个参数指定的信号量进行初始化，初始值由第四个参数传入

#include<sys/types.h>
#include<sys/ipc.h>
#include<sys/sem.h>
int semop(int semid,struct sembuf* sops, unsigned nsops);
第二个参数：结构体指针，指示了具体的返回内容
第三个参数：结构体指针所指向的结构体数量，
函数功能：用于对指定的信号量进行操作

struct sembuf{
	unsigned short sem_num;//信号量所在下标
	short sem_op;//信号量的操作，正数表示增加，附属表示减少
	short sem_flg;//操作标志，默认给0
};

ipcs -s 察看系统中所有的信号量集
ipcrm -s XXX 表示删除系统中指定的信号量集
ipcs -a 表示删除指定的信号量集



3.网络的基本常识
目前主流的网络通讯软件:QQ 微信 飞信






3.1七层网络协议模型
ISO将网络从逻辑上划分出来了7层，从而保证了数据传递的安全性和有效性等。
7层网络协议模型如下：
应用层：主要用于将数据交给具体的应用程序
表示层：主要用于按照统一的格式对数据进行封装
会话层：主要用于控制对话的开始和结束等
传输层：主要用于对数据进行错误的检查和排序等
网络层：主要用于借助具体的网络协议传输数据
数据链路层：主要用于将数据转换为高低电平信号
物理层：主要指网卡驱动，网卡以及交换机等

3.2常用的网络协议
TCP协议:传输控制协议，一种面向连接的协议,类似打电话
transport control protocol

UPD协议：用户数据报协议，一种非面向链接的协议，类似发短信

IP协议：互联网协议，是TCP和UDP的底层协议

3.3IP地址
IP地址本质上就是该主机在互联网中的唯一地址标识
IP地址其实是32位二进制组成的整数ipv6
128位二进制组成的整数ipv6

日常生活中采用点分十进制表示法来描述IP地址，也就是将IP地址中的每一个字节转换为一个十进制整数
而多个十进制整数之间用小数点分割

为了便于管理，将ip地址分为两部分：网络地址+主机地址
根据网络地址可以定位到具体的某一个子网中，再根据主机地址在该子网中进行查找即可

根据网络地址和主机地址的不同将ip地址分为一下4类
A类：0+7位网络地址+24为主机地址
B类：10+14位网络地址+16位主机地址
C类：110+21位网络地址+8位主机地址
D类：1110+28位多播地址









