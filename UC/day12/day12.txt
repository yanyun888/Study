

day12

#include<sys/types.h>
#include<sys/ipc.h>


key_t ftok(const char * pathname,int proj_id);
proj_id不能为0，只取低8位
功能：用于根据参数指定的文件路径和项目ID来生成一个key_t类型的key值



#include<sys/types.h>
#include<sys/ipc.h>
#include<sys/msg.h>
int msgget(key_t,int msgflg);
IPC_CREAT - 创建
IPC_EXCL - 与IPC——CREAT配合使用，
0 - 获取已经存在的消息队列
当创建一个新消息队列时，需要在第二个参数中指定消息队列的权限，指定方式进行按位或，如：0644




int msgsend(int msqid,const void* msgp,size_t msgsz,int msgflg);
第一个参数：消息队列的id
第二个参数：存放消息的首地址
第三个参数：消息的大小，指定消息内容的大小，不包括消息的类型。
第四个参数：发送的方式，默认给0即可

struct msgbuf{
	long mytype;
	char mtext[1];
}

ssize_t msgrcv(int msqid,void* msgp,size_t msgsz,int msgflg);
失败返回-1


第四个参数：0 - 表示读取队列中的第一个消息
>0 - 表示读取消息队列中第一个类型为msgtyp的消息


#include<sys/types.h>
#include<sys/ipc.h>
#include<sys/msg.h>

int msgctl(int msqid,int cmd,struct msqid_ds* buf);

第二个参数：IPC_RMID -- 立即删除消息队列
第三个参数：结构体指针

相关的基本命令
ipcs -q
ipcrm -q 队列id  表示删除指定的消息队列


综合小项目

实现功能
开户、销户、存款、取款、转帐、查询
采用C/S架构


客户端、服务器、数据库

项目的详细设计
(1)采用两个消息队列实现进程间的通信
消息队列1：客户端  ->  服务器
消息队列2：服务器  ->  客户端

(2)8种消息类型：6种业务类型 + 成功 + 失败


(3)采用结构体表示账户信息 和 消息的数据类型
账户信息：帐号、账户名称、密码、余额
消息的数据类型：消息的类型 + 消息的内容(账户的结构体) 

(4)客户端的详细流程 -- 以开户为例子
a.提供一个字符界面，使用printf函数打印
b.用户根据字符界面的提示选择/输入具体的业务编号
c.如果输入1，则办理开户业务;要求用户提供，账户名称，密码，余额的信息。
d.将上述信息大包成一个消息，发送到消息队列1中，等待服务其处理；
e.等待接收消息队列2中的结果。


(5)服务器的详细流程 -- 以开户为例子
a.创建两个消息队列，来实现服务器的初始化工作，销毁两个消息队列对为服务器的关闭工作
b.接受客户端发来的业务编号和账户信息，从消息队列一中进行读取
c.调用generator_id函数自动生成一个帐号，补充完整账户的信息
d.直接将账户信息写入数据库中，来实现开户的功能
e.修改消息的类型，代表成功或失败，然后将消息再发送给客户端，也就是消息队列2；

使用文件的操作实现数据库的功能,建议大家采用一个账户对应一个文件的方案，则销户时只需要删除对应的文件即可
使用帐号作为文件名，从而避免重复。使用sprintf进行转换。


项目的要求，采用多文件的结构进行编程，支持makefile
要求变成实现开户的基本功能即可，

bank.h
client.c
server.c
file.c

是否需要将每一个功能做成动态加载的共享库







