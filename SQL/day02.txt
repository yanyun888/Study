

标记语言html，xml

统一建模语言UML
脚本语言shell，python，JS

单行函数
多表链接
order by排序
分组函数


select id,last_name,salary from s_emp where last_name like '%ga%';
select id,last_name,salary from s_emp where last_name like '%ma%' or last_name like '%Ma%';
select id,last_name,salary from s_emp where last_name like '%ma%' or last_name like '%Ma%';

大小写不区分的
select id,last_name,commission_pct from s_emp where commission_pct is NULL;

select id,last_name from s_emp order by id desc;

order by可以支持字段名/别名/select后面的序号，但一般不推荐使用序号 
order by可以支持多个字段同时排序，但是第一个条件是主条件，只有第一个相等时才会启用第二个

select id,last_name,salary from s_emp order by salary desc,id;

select id,last_name,salary*12 salary from s_emp order by salary;

在商业开发领域，查询结果一般都会使用order by


oracle函数
函数是一个功能的实现，比如NVL()就是空值处理功能的函数
单行函数主要分为：
字符函数 - 处理文本型数据
数值函数 - 处理数值型数据
日期函数 - 处理日期型数据
转换函数 - 字符型和另外两种类型之间的转换
其他函数 - 如NVL

LOWER/UPPER/INITCAP
CONCAT
SUBSTR/LENGTH/NVL

substr('string',1,3)  -> str
第一个参数代表被截取的字符串，
第二个参数代表从第1个开始
第三个参数代表截取的长度

oracle提供了一个虚表dual，里边没有数据，只有一个字段，并且字段类型可以随意。

select 1+1 from dual;

sysdate 当前日期
select sysdate from dual;

select substr('st',1,3) from dual;

select id,last_name,salary from s_emp where lower(last_name) like lower('%ma%');

ROUND - 四舍五入 
TRUNC - 截断

round(45.925,-1) -> 50
trunc(45.925) -> 45
trunc(45

select id,last_name,trunc(salary/100) from s_emp;

日期函数
主要进行日期的一些处理,用的比较少
sysdate - 系统当前的日期

转换函数
to_char() - 日期转成字符(必须会)
to_date() - 字符转成日期(必须会)
to_number() - 字符串转成数值
to_char() - 数值转成字符串

to_char(日期,格式字符串);
’yyyy-mm-dd hh24:mi:ss‘

.net 和 java是比较类似的

select to_char(sysdate,'yyyy-mm-dd hh24:mi:ss') from dual;
select to_char(start_date) from s_emp;

编程的基本原则：开闭原则(可以扩展，不能修改);

to_char主要用于查询语句，to_date主要用于增和改

select id,last_name,to_char(start_date,'yy-mm-dd') "date" from s_emp where to_char(start_date,'mm-dd') = '05-14';


select id,last_name,to_char(start_date,'yy-mm-dd') "date" from s_emp where to_char(start_date,'mm') = to_char(sysdate,'mm');

to_date(日期字符串, 格式字符串);
select to_date('2008-08-08','yyyy-mm-dd') from dual;

单行函数可以进行无限次的嵌套，

多表连接查询
如果查询的数据来自于2张更多的表，使用多表连接,
数据一定会分表，查询必然使用多表连接。
其中，select中表名如果没有重名字段，可以省略。
from中表的别名不是必须，但一般都会写。
连接条件有很多。一般来说，连接N个表至少要N-1个连接条件。
多表连接非常的消耗性能。

不加条件的多表连接得出是"笛卡尔乘积"，是无意义的。


select e.id,e.last_name,d.name
from s_emp e,s_dept d
where e.dept_id = d.id;

select e.last_name,d.name dept_name,r.name region_name
from s_emp e,s_dept d,s_region r
where e.dept_id=d.id and d.region_id=r.id;

多表的连接条件分为4种：
等值连接 - 用等号做连接(80%以上)
非等值连接 - 用其他方式连接(比如between and)
外连接 - 显示出 匹配的数据和一些不匹配的数据()
自连接 - 自己连接自己，给同一个表起两个别名


select e.last_name,e.salary,g.grade
from s_emp e,salgrade g
where e.salary between g.losal and g.hisal;


外连接(+)
select e.id,e.last_name,d.name
from s_emp e,s_dept d
where e.dept_id(+)=d.id;

没有(+)的那一端不匹配的数据会显示出来
两端都有(+)是错误的，使用full out join来实现

自连接
select e.id,e.last_name,e.manager_id,m.last_name
from s_emp e,s_emp m
where e.manager_id=m.id(+);

从Oracle9i开始，多表连接有全新的另一套写法
select e.id,e.last_name,d.name
from s_emp e
join s_dept d
on (e.dept_id=d.id);

select e.last_name,d.name dept_name,r.name region_name
from s_emp e
join s_dept d
on(e.dept_id=d.id)
join s_region r
on (d.region_id=r.id);

select e.id,e.last_name,d.name
from s_emp e
left outer join s_dept d
on (e.dept_id=d.id);








