复习：
1.使用共享内存实现进程间的通信
1.1 基本流程
  (1)获取key值，使用ftok函数
  (2)创建/获取共享内存，使用shmget函数
  (3)挂接共享内存，使用shmat函数
  (4)使用共享内存
  (5)脱接共享内存，使用shmdt函数
  (6)如果不再使用,则删除共享内存,使用shmctl函数

1.2 基本命令
   ipcs -m  表示查看系统中已经存在的共享内存
   ipcrm -m 共享内存的ID 表示删除指定的共享内存
   
2.使用信号量集实现进程间的通信
2.1 基本概念
    信号量 - 本质就是一个计数器，用于控制同时访问同一个共享资源的进程个数/线程个数
    信号量集 - 信号量组成的集合，同时控制多种共享资源的访问个数
    
2.2 信号量的工作方式
(1)初始化信号量，初始化为最大值
(2)如果有进程申请到资源，则信号量的值减1
(3)当信号量的值为0时，申请资源的进程进入阻塞状态
(4)如果有进程释放资源，则信号量的值加1
(5)当信号量的值 >0时，阻塞的进程可以继续抢占资源，抢占不到资源的进程继续阻塞   

2.3 使用信号量集实现进程间通信的模型
(1)获取key值，使用ftok函数
(2)创建/获取信号量集，使用semget函数
(3)初始化信号量集，使用semctl函数
(4)操作信号量集，使用semop函数
(5)如果不再使用，则删除信号量集，使用semctl函数

2.4 基本命令
   ipcs -s  表示查看系统中所有的信号量集
   ipcs -a  表示查看系统中所有的IPC结构
   ipcrm -s 信号量的ID 表示删除指定的信号量集
   
3.网络的基本常识
3.1 七层网络协议模型
   应用层、表示层、会话层、传输层、网络层、数据链路层、物理层  

3.2 常见的通信协议
  TCP协议 - 传输控制协议,面向连接的协议，打电话
  UDP协议 - 用户数据报协议，非面向连接的协议，发短信    
  IP协议 - 互联网协议，是TCP/UDP底层协议

3.3 IP地址
    IP地址 - 是互联网中的唯一地址标识，本质是32位二进制组成的整数(Ipv4),还可以是128位二进制组成的整数(Ipv6)
    日常生活中采用点分十进制表示法
如：
    0x01020304 => 1.2.3.4
    
    IP地址主要分为：网络地址 + 主机地址
    IP地址主要分为4类：A类 B类 C类 D类

查看IP地址的基本命令:
    windows系统： ipconfig   ipconfig/all
    linux系统：   ifconfig   /sbin/ifconfig
----------------------------------------------
今天内容：
   (1)网络的基本常识
   (2)基于Socket的一对一通信模型
   (3)基于TCP协议的网络通信模型

1.网络的基本常识
1.1 子网掩码
   IP地址主要分成两部分： 网络地址 + 主机地址
   通过子网掩码来划分IP地址中的网络地址和主机地址，子网掩码更多地用于判断两个IP地址是否在同一个局域网中
   划分IP地址的方法： IP地址  &  子网掩码
如：   
   IP地址： 172.30.17.45
 子网掩码： 255.255.255.0  &
---------------------------------
            172.30.17  - 网络地址
            45 - 主机地址

练习：
  判断IP地址 166.11.160.1 和 166.11.161.45 是否在同一个局域网中，子网掩码都是：255.255.254.0?

   IP地址： 166.11.160.1
 子网掩码： 255.255.254.0  &
---------------------------------
            166.11.160 - 网络地址
            1 - 主机地址   

   IP地址： 166.11.161.45
 子网掩码： 255.255.254.0  &
---------------------------------
            166.11.160  - 网络地址
            1.45 - 主机地址   
 上述两个IP地址在同一个局域网中  

1.2 端口号
   IP地址 - 根据IP地址可以定位到具体的一台主机
   端口号 - 根据端口号可以定位到主机中的某一个
            具体的进程
   端口号本质上是：unsigned short类型，端口号的表示范围是：0 ~ 65535，但是其中0~1024之间的端口号一般由系统占用，使用从1025开始
   网络编程中提供： IP地址 + 端口号

1.3 字节序的概念和使用
  小端系统： 低位数据存放在低位内存地址中
  大端系统： 低位数据存放在高位内存地址中   
如：
   对于数据 0x12345678来说
小端系统中按照地址从小到大：0x78 0x56 0x34 0x12
大端系统中按照地址从小到大：0x12 0x34 0x56 0x78
    
    一般来说，将发送到网络中数据在发送之前先转换为网络字节序再发送，对于从网络中接受到的数据先转换为主机字节序再解析；而网络字节序本质就是大端系统的字节序，主机字节序就是指本地系统的字节序

2.基于Socket的一对一通信模型
2.1 基本概念
   Socket 翻译为：插座，本质就是通信载体/接口

2.2 基本的通信模型(了解)
服务器：
   (1)创建socket，使用socket函数
   (2)准备通信地址，使用结构体类型
   (3)绑定socket和通信地址，使用bind函数
   (4)进行通信，使用read/write函数
   (5)关闭socket，使用close函数
客户端： 
   (1)创建socket,使用socket函数
   (2)准备通信地址，服务器的地址
   (3)连接socket和通信地址，使用connect函数
   (4)进行通信，使用read/write函数
   (5)关闭socket,使用close函数

2.3 相关函数的解析
(1)socket函数
   #include <sys/types.h> 
   #include <sys/socket.h>
   int socket(int domain,int type,int protocol);   
第一个参数：协议族/域,
            主要决定本地通信还是网络通信
    AF_UNIX/AF_LOCAL - 本地通信
    AF_INET - 基于ipv4的网络通信
    AF_INET6 - 基于ipv6的网络通信
第二个参数：通信的类型
	SOCK_STREAM - 基于面向连接的，有序的，可靠的数据流传输，本质就是基于TCP协议的通信方式
	SOCK_DGRAM - 基于非面向连接的，不可靠的数据报传输，本质就是基于UDP协议的通信方式

第三个参数：具体的协议，默认给0即可
返回值：成功返回socket的描述符，失败返回-1
函数功能：
    主要用于创建通信点，从而实现通信
    
(2)通信地址的数据类型
a.通用的通信地址类型
  struct sockaddr 
  {
     sa_family_t sa_family; //通信的协议族
     char        sa_data[14];//字符串的通信地址
  };
  - 该结构体通常用于作为函数的参数类型，基本不会去定义结构体变量进行使用
  
b.实现本地通信的结构体类型 
  #include <sys/un.h>
  struct sockaddr_un
  {
     sa_family_t  sun_family；//协议族     	
     char    sun_path[];//socket文件的路径
  };

c.实现网络通信的结构体类型
  #include <netinet/in.h>
  struct sockaddr_in
  {
      sa_family_t sin_family;//协议族 AF_INET.
      in_port_t   sin_port;//端口号 1025
      struct in_addr  sin_addr;//IP地址
  };  
  struct in_addr
  {
  	  in_addr_t  s_addr;//整数类型的IP地址
  };

(3)bind函数
   #include <sys/types.h>
   #include <sys/socket.h>
   int bind(int sockfd, const struct sockaddr *addr,socklen_t addrlen);
第一个参数：socket描述符,socket函数的返回值
第二个参数：通信地址的首地址，类型转换
第三个参数：通信地址的大小，使用sizeof计算
函数功能：
   主要用于绑定socket和通信地址
   
(4)connect函数
   #include <sys/types.h>
   #include <sys/socket.h>
   int connect(int sockfd, const struct sockaddr *addr,socklen_t addrlen);
函数功能：
   主要用于连接socket和通信地址，参数以及返回值请参考bind函数即可   
   
(5)字节序的转换函数
   #include <arpa/inet.h>
   uint32_t htonl(uint32_t hostlong);
=> 主要用于将32位的主机字节序转换为网络字节序
   uint16_t htons(uint16_t hostshort);
=> 主要用于将16位的主机字节序转换为网络字节序
   uint32_t ntohl(uint32_t netlong);
=> 主要用于将32位的网络字节序转换为主机字节序
   uint16_t ntohs(uint16_t netshort);
=> 主要用于将16位的网络字节序转换为主机字节序

(6)IP地址的转换函数
   in_addr_t inet_addr(const char *cp);
=> 主要用于将字符串形式的IP地址转换为整数类型
   char *inet_ntoa(struct in_addr in);
=> 主要用于将结构体类型的IP地址转换为字符串类型

3.基于TCP协议的网络通信模型(重点)
3.1 通信模型
服务器：
   (1)创建socket,使用socket函数
   (2)准备通信地址，使用结构体类型
   (3)绑定socket和通信地址，使用bind函数
   (4)监听，使用listen函数
   (5)响应客户端的连接请求，使用accept函数
   (6)进行通信，使用read/write函数
   (7)关闭socket,使用close函数
客户端：
   (1)创建socket,使用socket函数
   (2)准备通信地址，服务器的地址
   (3)连接socket和通信地址，使用connect函数
   (4)进行通信，使用read/write函数
   (5)关闭socket,使用close函数

3.2 相关的函数解析
(1)listen函数
   #include <sys/types.h>          
   #include <sys/socket.h>
   int listen(int sockfd, int backlog);
第一个参数：socket描述符，socket函数的返回值
第二个参数：允许排队等待被响应的最大连接数
函数功能：
    主要用于监听指定socket上的连接个数
    
(2)accept函数   
   #include <sys/types.h>
   #include <sys/socket.h>
   int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
第一个参数：socket描述符，socket函数的返回值
第二个参数：存放客户端通信地址的首地址
第三个参数：存放客户端通信地址的空间大小
返回值：成功返回用于通信的描述符，失败返回-1
函数功能：
    主要用于接受/响应socket上的客户端连接请求
    
注意：
   socket函数创建的描述符主要用于监听
   accept函数创建的描述符主要用于通信
   
作业：
   编程实现基于TCP协议的一对多模型实现，具体的要求如下：  
(1)要求服务器不断地响应客户端的连接请求
(2)要求服务器可以同时响应多个客户端的连接请求
(3)要求服务器可以和每一个客户端不断地通信
(4)要求当客户端发来"bye"时，则表示客户端下线
(5)要求客户端发送的数据内容由用户手动输入
(6)要求使用ctrl+c来关闭服务器

明日预报：
   (1)网络编程
   (2)多线程
   
           
   
   
   










      
          
   
   
   
            
   
   
      
   
   
   
   
   


   








