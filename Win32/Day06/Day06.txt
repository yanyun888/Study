TranslateMessage（&nMsg )
{
   if(nMsg.message!=WM_KEYDOWN)
       return...;
   根据nMsg.wParam(虚拟键码值)可以获知哪个按键被按下
   if(不是)
      return...;
   if(是)
   {
       判断CapsLock(大写锁定键)是否处于打开状态
       if(打开)
          PostMessage(nMsg.hwnd, WM_CHAR, 0X41,...);
       else
         PostMessage(nMsg.hwnd,WM_CHAR, 0X61,...);         
   }
}

//绘制圆形
BOOL Ellipse(
  HDC hdc,        // BeginPaint函数的返回值
  int nLeftRect,  // 左上角x坐标
  int nTopRect,   // 左上角y坐标
  int nRightRect, //右下角X坐标
  int nBottomRect //右下角Y坐标
);
//获取窗口的边界信息
BOOL GetClientRect(
  HWND hWnd,      // 窗口句柄
  LPRECT lpRect   // 返回窗口的边界信息
);
//例如:  RECT rc = { 0 };
              GetClientRect( hWnd, &rc );

BOOL AppendMenu(
	HMENU hMenu, //菜单句柄
	UINT uFlags, //菜单项风格
	UINT_PTR uIDNewItem, //菜单项ID或下拉菜单句柄
	LPCTSTR lpNewItem //菜单项的名称);
uFlags:
   MF_POPUP - 具有这种风格的菜单项,被点击后弹出下拉菜单,
                          uIDNewItem必须添写下拉菜单的句柄。
   MF_SEPARATOR - 具有这种风格的菜单项,为分隔线。
   MF_STRING - 具有这种风格的菜单项,被点击后能够发出消息
                           (WM_COMMAND)，uIDNewItem参数必
                           须填写菜单项ID.

//更改菜单项 勾选/非勾选 状态
DWORD CheckMenuItem(
  HMENU hmenu,        // 菜单句柄
  UINT uIDCheckItem,  // 菜单项ID或菜单项位置（索引）
  UINT uCheck         // 具体的状态
);
uCheck:
  MF_BYCOMMAND - uIDCheckItem参数填写的为菜单项ID
  MF_BYPOSITION - uIDCheckItem参数填写的为菜单项位置
  MF_CHECKED - 勾选
  MF_UNCHECKED - 非勾选

//删除菜单项
BOOL DeleteMenu(
  HMENU hMenu,     // 菜单句柄
  UINT uPosition,  // 菜单项ID或菜单项位置
  UINT uFlags      // MF_BYCOMMAND/MF_BYPOSITION
);
//将 客户区坐标系下的坐标 转换为 屏幕坐标系下的坐标
BOOL ClientToScreen(
  HWND hWnd,       // 窗口句柄
  LPPOINT lpPoint  // [IN/OUT]
            输入:客户区坐标系下的一个坐标值
            输出:转换后的屏幕坐标系下的坐标
);



                 CL.EXE
.c/.cpp---------------->.obj |
                                              |  LINK.EXE
              RC.EXE                    |-------------->.exe...
.rc---------------------->.res|

















