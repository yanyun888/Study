day07
当多次调用open函数打开同一个文件时，v节点只有一个，但是文件表有多个
当对此调用open函数打开多个不同的文件时，v节点有多个。
文件标示符0，1，2这三个分别代表输入，输出，错误的文件标示符号。
扩展项目：
使用文件操作的相关函数实现学生信息管理系统，增/删/改/查
duplicate
int dup(int oldfd);
复制文件操作符号
int dup2(int oldfd,int newfd);
int fcntl(int fd,int cmd,...);
(1)复制文件描述符 F_DUPFD
(2)获取/设置文件描述符 F_GETFD,F_SETFD;
(3)获取/设置文件的状态标志 F_GETFL,F_SETFL;
(4)建议锁(文件锁) F_GETLK,F_SETLK,F_GETLKW;
struct flock{
    ...
    short l_type;    /* Type of lock: F_RDLCK,F_WRLCK, F_UNLCK */
    short l_whence;  /* How to interpret l_start:SEEK_SET, SEEK_CUR, SEEK_END */
    off_t l_start;   /* Starting offset for lock */
    off_t l_len;     /* Number of bytes to lock */
    pid_t l_pid;     /* PID of process blocking our lock (F_GETLK only) */
    ...
};
文件锁本质就是读写锁，一把读锁，一把写锁，其中读锁是共享锁。
允许其他进程加读锁，不允许其他进程加写锁；而写锁是互斥锁。
使用多个进程同时给同一个文件加锁时，只要进程加锁的区域之间有交集时，才会产生冲突，
否则互不影响。
注意事项
文件锁并不能限制对文件的读写操作，但是文件锁能够限制其他进程能否加锁成功，也就是说文件锁可以
保证第二次加所失败。
如何通过文件锁来控制对文件的读写操作呢？
每次在读写操作之前，先尝试对文件加读写锁，如果枷锁成功，则进行读写操作，反之，不进行读写操作。
释放锁的方法
(1)将锁的类型l_type改变为F_UNLCK,重新设置。

F_SETLKW类似与F_SETLK,不同的是，当文件中已经存在冲突锁时，并不会加锁失败，而是进入阻塞状态，
一直等到文件上的锁被释放，当前锁可以加上为止。

F_GETLK作为函数的第二个实参
