
复习，
文件操作相关函数，
stat,fstat
int stat(const char*,struct stat* buf);
int fstat(int fd,struct stat* buf);
access();
chmod()/fchmod();
truncate()/ftruncate();修改文件的大小信息。
umask();


link()/unlink();
//硬链接在
rename()/remove();

opendir()
readdir()
closedir()


今天的主要内容：
1.进程的管理
1.1基本基本概念和基本内容
ps - 主要用于察看当前终端启动的进场(进程的快照)


ps 命令的执行结果如下
PID - 进程的编号(重点关注)
TTY - 终端的次要编号
TIME - 消耗cpu的时间
CMD - 具体的进程名称以及路径

whereis ps
echo $SHELL
echo $PATH

注意事项:ps等命令本质上就是可执行文件，是硬盘上的文件，只不过文件的名称叫做ps等而已

ps -aux 表示显示所有用户的进程
ps -aux | more分屏幕显示所有的用户
%cpu - 占用cpu的百分比
%MEM - 占用内存的百分比
vsz - 占用虚拟内存的大小
RSS - 占用物理内存的大小

常见的进程状态如下
S - 休眠状态
s - 进程的领导者，该进程拥有子进程
Z - 僵尸进程，进程已经结束，但是资源没有回收
R - 正在运行的进程
O - 可运行状态的进程
T - 挂起状态的进程
< - 优先级比较高的进程
N - 优先级比较低的进程

ps -ef 表示以全格式的方式现实进程的信息
ps -ef | more
PPID - 父进程的进程号
STIME - 开始时间

父进程和子进程的概念

进程结构是树形结构
进程号较小的启动较大的进程

进程0 - 系统进程
进程1 init

kill -9 进程 	杀死指定的进程

1.2 各种ID的获取
pid - 进程的编号，是进程的唯一标识,采用延迟重用的策略进行管理，保证了在任意时刻
	的进程号都是唯一的，保证了在任意时刻的进程号都是唯一的。

getpid()
getppid()
getuid()
getgid()

pid_t/gid_t/uid_t,本质上就是int类型

1.3进程的创建
(1)fork
#include<unistd.h>
pit_t fork(void);
通过复制当前正在调用进程的方式来创建一个新进程(子进程)。
函数调用成功时，父进程返回子进程的进程号，子进程返回0。
注意：使用fork函数创建子进程之后，父子进程执行的先后顺序有操作系统负责调度，由操
作系统负责调度

(2)fork函数创建子进程的代码执行方式
a.对于fork之前的代码有父进程执行一次
b.对于fork之后的代码由父子进程各自执行一次，一共执行两次
c.是用fork函数创建子进程后，父子进程各自返回一次，父进程返回子进程的进程号，子进程返回0；

(3)父子进程的先后流程
a.使用fork函数创建子进程后，父子进程同行启动，各自独立运行
b.如果子进程先结束，则子进程会给父进程发送消息
c.如果父进程先结束，则子进程变成孤儿进程，重新设定1为父进程，1(inti)为孤儿院
d.如果子进程先结束，但是由于各种原因父进程没有受到子进程发来的信号，就不能帮助子进程
	释放资源，形成了僵尸进程。


(4)父子进程之间的内存关系
进程内存区域划分：代码区，数据区，堆区，栈区
使用fork函数创建的子进程会复制除了代码区之外的所有数据(栈区，堆区)
父子进程会共用代码区

(5)拓展
a.每次fork，进程都会翻倍
如：
fork();
fork();
会创建4个进程：1个父进程+2个子进程+1个孙进程

pid_t pid = fork();
if(0 ！= pid){
	fork();
}
会创建两个进程：1个父进程+2个子进程

while(){
	fork();
}
这是fork炸弹


1.4进程的终止
(1)正常终止进程的方式
a.在main函数中执行到了return 0；
b.调用exit函数可以终止进程
c.调用_exit()/_Exit();
d.最后一个线程返回
e.最后一个线程调用了pthread_exit();

(2)非正常终止进程的的方式
a.采用信号终止进程
b.最后一个线程被其他县城调用pthread_cancel函数取消


1.5进程终止相关函数解析

_exit(); -- #include<unistd.h>
_Exit(); -- #include<stdlib.h>

函数的参数内容会被返回给父进程作为当前进程的推出状态，如果父进程想收集该信息，则需要
调用wait系列函数中的一个来处理。

exit(); -- #include<stdlib.h>

主要用于引起程序的终止，将状态参数&0377返回给父进程，父进程需要用wait系列函数处理返回值
同时atexit()/on_exit();会被调用


int atexit(void (*func) (void)); -- #include<stdlib.h>
对exit和main中的return语句做善后工作。
成功返回0，失败返回非0；


1.6使用wait系列函数收集退出状态信息

#include<sys/types.h>
#include<sys/wait.h>


pid_t wait(int* status); -- 成功会返回子进程的进程id，失败会返回-1
waitpid

参数不为空时，会将退出状态信息春放在参数指向的int类型的存储空间中，解析该存储空间中的数据需要
依赖以下的带参宏:
WIFEXITED(int status); -- 判断子进程是否正常终止
WEXITSTATUS(int status); -- 获取进程的退出码

pid_t waitpid(pid_t pid,int *status,int options);
第一个参数：等待的进程号
pid<-1 表示等待进程组id为pid绝对值的任意一个子进程结束(了解)
pid == -1 表示等待任意一个子进程结束
pid == 0 表示等待任意一个和正在调用进程在同一个进程组的子进程结束(了解)
pid > 0 表示等待进程号为pid的子进程结束(重点)
进程的终止只是进程状态改变的一种方式。
返回值：成功返回状态发生改变的子进程ID，失败-1
options默认为0
wait(&status) 等价于 waitpid(-1,&status,0);
函数只要用于挂起当前正在调用的进程，直到参数指定的子进程状态发生改变为止

作业
使用fork函数创建2个子进程，分别睡眠10/20s，两个子进程的推出码分别给100/200，父进程使用
waitpid函数进行等待，waitpid函数的第一个阐述分别给定子进程一的进程号，和子进程二的进程号
以及-1三种情况进行测试，并且观察结果。






