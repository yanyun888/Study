
##关于引用和指针的符号书写规范
定义一个指针变量时，习惯让 * 停靠在数据类型那边，定义多个指针变量，习惯 * 停靠在变量名这边。
`int* p;`
`int *p,*q;`
引用符号停靠习惯可指针一致。
`int& b=a;`
`int &b=a,&c=a;`
`double& rd = d; // double* const pd = &d ;`

#类型转换
* 隐式类型转换
char c = 'A';
int i = c;//隐式类型转换
void func(int n){ ... }
func(c);//隐式
* 显式类型转换
C语言(强制类型转换)
char c = 'a';
int i = (int) a ; C语言
int i = int (a) ; C++的另外一种形式

##C++增加了4中操作符的形式
* 静态类型转换
目标类型变量 = static_cast< 目标类型 > ( 原类型变量 )；
int a;
void *pv = &a ;
int *ps = static_cast<int*>(pv);
主要用于将void*转换为其他类型的指针

* 动态类型转换
目标类型变量 = dynamic_cast< 目标类型 > ( 原类型变量 )；
主要用于具有多态特性的父子类对象指针或引用的转换。

* 常类型转换
目标类型变量 = const_cast< 目标类型 > ( 原类型变量 )
去除一个指针或者引用的的常量修饰

volatile 修饰的变量在每次使用时都小心的从内存中读取出来

* 重解释类型转换
目标类型变量 = reinterpret_cast< 目标类型 > ( 原类型变量 )
不相关指针或者引用类型数据转换，也可以是任意类型指针和整数之间转换。

#小节: C++之父亲给c程序员的建议
1.慎用宏，代之以const enum inline
` #define PI 3.14  ->  const double PI = 3.14;`
 `enum STATE{SLEEP,RUN,STOP};`
 inline int max(int a,int b){
    return a>b?a:b;
 }//使用内联函数来 
2.变量随用随声明，同时初始化
3.尽量用new和delete替换malloc和free
4.少用void*, 指针计算，联合体 和 强制类型转换。
5.尽量用string表示字符串，少用C风格的char*
` #include <string> //C++声明string类`
` #include <string.h> //C语言和字符串相关头文件`
` #include <cstring> //C++风格的 等价于include <string.h>`
 
 C++风格的字符串操作更加简单，赋值和更改也更加方便。
 s.c_str(); //
 s.length();//C++ 风格的 求字符串长度
 
#面向对象编程
C面向过程，结构化的程序设计
C++面向对象

#类和对象
##1.对象
 万物皆对象，任何一种事物都可以看作是对象。
##2.面向对象
2.1如何表达面向对象
##3类
类是将多个对象的共性提取出来，定义的一种新的数据类型，是对对象属性和行为的抽象的描述。
对象是类的具体化和实例化。
3.1类的定义
class/struct 类名:继承方式 基类{
    类名(形参表):成员变量(初值){ ... }//构造函数
    ~类名(void) { ... } //析构函数
    返回类型 函数名 (形参表) 常属性 异常说明{ ... } //成员函数
    数据类型 变量; // 成员变量
    
};

类的简单形式
class 类名{
    访问控制限定符:
    成员变量
    成员函数
};

C++中class和struct的区别, 访问控制限定符: struct默认public / class默认private

3.2 访问控制限定符
public 公有成员
private 私有成员，只有自己能够访问
protected 保护成员，只有自己和自己的子类可以访问该成员

注意：访问控制属性仅仅做用于类，而非作用于对象，同一个类的不同对象，可以访问非公有部分。
属性都设置成私有的，成员函数设置成公有的。(C++封装的语法特性)

4.构造函数
class 类名{
    类名(构造形参表):初始化表{构造函数体}
};
构造函数的特点：
1） 函数与类名相同，并且没有返回类型。
2） 构造函数在对象创建时自动被调用
3） 构造函数确定对象的初始状态，以及分配必要的资源。
4） 构造函数在每个对象的生命周期内，一定会被调用，而且仅仅被调用一次。
类名 对象名(构造实参); // 栈空间
new 对象名(构造实参); // 堆空间

5） 对象创建的过程
    >为对象分配内存空间
    >以构造实参调用函数-- 一次调用各个基类的构造参数，初始化成员子对象；执行构造函数的代码。

6） 类的声明和定义可以放在不同的文件。
类的声明放在.h文件中，类的定义放在.cpp文件中；使用该类的代码一般在其他的.cpp文件中。
类的成员函数的声明和定义分开写。

