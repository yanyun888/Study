一 MFC的文件操作
   1 相关类
   CFile类-封装了文件句柄和操作文件的API。
   CFileFind类-提供了文件查找的功能。
   2 CFile类的使用
   2.1 新建或者打开文件
       CFile::OPen
   2.2 文件读写
       CFile::Read/Write
   2.3 关闭文件
       CFile::Close
   注意的问题：1 文件操作通常会放到异常处理结构中
               2 文件读写时，注意当前的指针位置
   2.4 设置/获取文件信息
   CFile::GetStatus/SetStatus
   3 CFileFind类的使用
   练习：查找指定目录下的所有文件和目录  (10分钟)
         1 递归
         2 判断，并排除.目录   IsDots()

二 序列化(基本数据类型的序列化)
   1 相关类
   CArchive类-归档类，提供具体的数据读写操作。可以使用它代替
              CFile::Read/Write函数。
   2 CArchive类的使用
   2.1 新建或者打开文件
       CFile::OPen
   2.2 文件读写
       2.2.1 定义CArchive对象，(构造函数的第一个参数是文件对象地址)
       2.2.2 文件读写
             >> ,读操作
             << ,写操作
       2.2.3 关闭CArchive对象
             CArchive::Close()
   2.3 关闭文件
       CFile::Close



三 对象的序列化(用户自定义的类)，MFC的第六个机制
   1 定义支持序列化的类
   1.1 直接或者间接派生自CObject类
   1.2 在类的声明中添加序列化的声明宏
       DECLARE_SERIAL()
       在类的实现中添加序列化的实现宏
       IMPLEMENT_SERIAL()
   1.3 重写CObject::Serialize函数，在函数中完成成员变量的序列化
   2 使用
   可以像一般类型的变量一样方便，需要注意的是，参数是对象的地址。

   课堂作业：
   自定义一个支持序列化的类，并完成该类的对象的序列化。
   CBook{ 编号，书名，作者，简介，单价}
   3 对象序列化的原理
   3.1 展开宏
       基于动态创建的。
   3.2 成员的介绍
       3.2.1 operator >>-当前类的友元函数。是一个全局的函数，作用是
             读取对象。
       3.2.2 _init_CStudent-全局的结构体变量，类型是AFX_CLASSINIT。
             在进入main()函数之前，将当前类的运行时类信息保存到
             链表m_classList中。

       struct AFX_CLASSINIT
       {
	   AFX_CLASSINIT(CRuntimeClass* pNewClass)
	   {
	      AfxClassInit(pNewClass);
	      {
	         /*
	             将当前类的运行时类信息保存到模块状态信息
	             的链表m_classList中
	         */
	         pModeState->m_classList.AddHead(pNewClass);
	      }
	   }
       };
     3.3 写对象的过程
         将类的信息(包括类的版本、类名称长度和类名称)和类的成员变量
         的值依次写入到文件的过程。
     3.4 读对象的过程
         3.4.1 首先从文件中读取类的名称，然后遍历链表，根据类的名称
               查找得到运行时类信息。
         3.4.2 动态创建对象
         3.4.3 从文件中读取成员变量的值给新创建的对象。
         "悟"

