



tarena:x:1000:1000:tarena,,,:/home/tarena:/bin/bash
用户名:密码：用户id：用户组id：注释信息：用户主目录：shell类型：

stderr错误缓存区


strerror(errno);//将错误编号转换为字符串
perror("  ");    --重点
printf("%m\n");
用于获取调用库函数期间产生的最后一个错误信息
优点：自动获取，自动接换行，自动加句号

error不能作为函数调用是否出错的依据，判断函数是否出错，
还是要根据返回值进行判断，只有在确定出错的情况下通过errorno来输出错误信息

环境标的概念和使用
每个进程内部都有一张环境标，用于记录当前进程的相关信息

系统中采用字符指针数组来保存环境信息
char ** environ记录环境记表的首地址
用NULL表示地环境表的结尾


每个进程都有一个自己的环境变量表，我们对environ所做的修改都是针对于个这进程来讲的。
进程开始会把系统的环境变量表复制到自己的环境变量表里。
？考虑在加载共享库时，在程序中设置环境变量

对环境变量进行更改的函数
char* getenv(const char* name);
int putenv(char* name);

int setenv(const char *name,const char* value,int overwrite);
int unsetenv(const char *name);
int clearenv(void);

int main(int argc,char* argv[],char* envp[]){}
第一个参数：命令行的个数
第二个参数：命令行给的指令
第三个参数：环境变量

main函数的第三个参数，由于历史原因，并不一定被所有的系统支持
建议使用全局变量表来访问全局变量表


实际应用(练习)：
1,用biaoc的文件操作实现a.txt到b.txt的文件拷贝
2,




内存管理
程序和进程的概念
程序 - 存放在硬盘上的可执行文件
进程 - 运行在内存中的进程

一个程序可以用于对应多个进程
进程中的内存区域划分

全局变量：BSS段
局部变量：栈区

(1)代码区text
--主要用于存放功能代码，函数指针指向该区域
(2)只读常量区text
--主要用于存放常量字符串和const修饰的已经初始化的全局变量和静态局部变量
(3)全局区/数据区data
--主要用于已经初始化的全局变量和静态局部变量，没有const修饰
(4)BSS段data
--主要用于存放没有初始化的全局变量和静态局部变量，在main函数执行之前会自动清0
(5)堆heap
--主要指使用malloc/calloc/realloc/free操作的内存区域，内存管理有程序员手动申请和释放
(6)栈区stack
--主要用于存放局部变量(包括函数的形参)，cosnt修饰的局部变量以及块变量，操作系统自动管理该内存

堆区一般按照地址从小到大进行分配，栈区一般按照地址从大到小进行分配










